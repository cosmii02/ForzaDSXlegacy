//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ForzaDSX.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.3.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.5")]
        public float _grip_Loss_Val {
            get {
                return ((float)(this["_grip_Loss_Val"]));
            }
            set {
                this["_grip_Loss_Val"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.2")]
        public float _throttle_Grip_Loss_Val {
            get {
                return ((float)(this["_throttle_Grip_Loss_Val"]));
            }
            set {
                this["_throttle_Grip_Loss_Val"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("35")]
        public int _max_Brake_Vibration {
            get {
                return ((int)(this["_max_Brake_Vibration"]));
            }
            set {
                this["_max_Brake_Vibration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int _min_Brake_Vibration {
            get {
                return ((int)(this["_min_Brake_Vibration"]));
            }
            set {
                this["_min_Brake_Vibration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.5")]
        public float _turn_Accel_Mod {
            get {
                return ((float)(this["_turn_Accel_Mod"]));
            }
            set {
                this["_turn_Accel_Mod"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.01")]
        public float _ewma_Alpha_Throttle {
            get {
                return ((float)(this["_ewma_Alpha_Throttle"]));
            }
            set {
                this["_ewma_Alpha_Throttle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public float _ewma_Alpha_Brake {
            get {
                return ((float)(this["_ewma_Alpha_Brake"]));
            }
            set {
                this["_ewma_Alpha_Brake"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public float _ewma_Alpha_Brake_Freq {
            get {
                return ((float)(this["_ewma_Alpha_Brake_Freq"]));
            }
            set {
                this["_ewma_Alpha_Brake_Freq"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.5")]
        public float _ewma_Alpha_Throttle_Freq {
            get {
                return ((float)(this["_ewma_Alpha_Throttle_Freq"]));
            }
            set {
                this["_ewma_Alpha_Throttle_Freq"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public float _forward_Accel_Mod {
            get {
                return ((float)(this["_forward_Accel_Mod"]));
            }
            set {
                this["_forward_Accel_Mod"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("35")]
        public int _max_Accel_Griploss_Vibration {
            get {
                return ((int)(this["_max_Accel_Griploss_Vibration"]));
            }
            set {
                this["_max_Accel_Griploss_Vibration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int _min_Accel_Griploss_Vibration {
            get {
                return ((int)(this["_min_Accel_Griploss_Vibration"]));
            }
            set {
                this["_min_Accel_Griploss_Vibration"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("200")]
        public int _min_Accel_Griploss_Stiffness {
            get {
                return ((int)(this["_min_Accel_Griploss_Stiffness"]));
            }
            set {
                this["_min_Accel_Griploss_Stiffness"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("75")]
        public int _max_Accel_Griploss_Stiffness {
            get {
                return ((int)(this["_max_Accel_Griploss_Stiffness"]));
            }
            set {
                this["_max_Accel_Griploss_Stiffness"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("200")]
        public int _min_Brake_Stiffness {
            get {
                return ((int)(this["_min_Brake_Stiffness"]));
            }
            set {
                this["_min_Brake_Stiffness"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int _max_Brake_Stiffness {
            get {
                return ((int)(this["_max_Brake_Stiffness"]));
            }
            set {
                this["_max_Brake_Stiffness"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("20")]
        public int _brake_Vibration_Start {
            get {
                return ((int)(this["_brake_Vibration_Start"]));
            }
            set {
                this["_brake_Vibration_Start"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int _brake_Vibration_Mode_Start {
            get {
                return ((int)(this["_brake_Vibration_Mode_Start"]));
            }
            set {
                this["_brake_Vibration_Mode_Start"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public int _throttle_Vibration_Mode_Start {
            get {
                return ((int)(this["_throttle_Vibration_Mode_Start"]));
            }
            set {
                this["_throttle_Vibration_Mode_Start"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("6")]
        public int _max_Throttle_Resistance {
            get {
                return ((int)(this["_max_Throttle_Resistance"]));
            }
            set {
                this["_max_Throttle_Resistance"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("6")]
        public int _max_Brake_Resistance {
            get {
                return ((int)(this["_max_Brake_Resistance"]));
            }
            set {
                this["_max_Brake_Resistance"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int _min_Throttle_Resistance {
            get {
                return ((int)(this["_min_Throttle_Resistance"]));
            }
            set {
                this["_min_Throttle_Resistance"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public int _min_Brake_Resistance {
            get {
                return ((int)(this["_min_Brake_Resistance"]));
            }
            set {
                this["_min_Brake_Resistance"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10")]
        public int _acceleration_Limit {
            get {
                return ((int)(this["_acceleration_Limit"]));
            }
            set {
                this["_acceleration_Limit"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.9")]
        public float _rpm_Redline_Ratio {
            get {
                return ((float)(this["_rpm_Redline_Ratio"]));
            }
            set {
                this["_rpm_Redline_Ratio"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool _disable_App_Check {
            get {
                return ((bool)(this["_disable_App_Check"]));
            }
            set {
                this["_disable_App_Check"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("6969")]
        public int _dsx_PORT {
            get {
                return ((int)(this["_dsx_PORT"]));
            }
            set {
                this["_dsx_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5300")]
        public int _forza_PORT {
            get {
                return ((int)(this["_forza_PORT"]));
            }
            set {
                this["_forza_PORT"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public float _left_Trigger_Eeffect_Intensity {
            get {
                return ((float)(this["_left_Trigger_Eeffect_Intensity"]));
            }
            set {
                this["_left_Trigger_Eeffect_Intensity"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1")]
        public float _right_Trigger_Eeffect_Intensity {
            get {
                return ((float)(this["_right_Trigger_Eeffect_Intensity"]));
            }
            set {
                this["_right_Trigger_Eeffect_Intensity"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public uint _verbose {
            get {
                return ((uint)(this["_verbose"]));
            }
            set {
                this["_verbose"] = value;
            }
        }

		//The point at which the brake will begin to become choppy
		public float GRIP_LOSS_VAL { get => _grip_Loss_Val; set => _grip_Loss_Val = value; }

		// The point at which the throttle will begin to become choppy
		public float THROTTLE_GRIP_LOSS_VAL { get => _throttle_Grip_Loss_Val; set => _throttle_Grip_Loss_Val = value; }

		//The maximum brake frequency in Hz (avoid over 40). COrrelates to better grip
		public int MAX_BRAKE_VIBRATION { get => _max_Brake_Vibration; set => _max_Brake_Vibration = value; }

		//The Minimum brake frequency in Hz (avoid over 40). Helps avoid clicking in controller
		public int MIN_BRAKE_VIBRATION { get => _min_Brake_Vibration; set => _min_Brake_Vibration = value; }

		//How to scale turning acceleration in determining throttle stiffness.
		public float TURN_ACCEL_MOD { get => _turn_Accel_Mod; set => _turn_Accel_Mod = value; }

		//Smoothing for Throttle Resistance output. Lower = smoother. Must be greater than 0
		public float EWMA_ALPHA_THROTTLE { get => _ewma_Alpha_Throttle; set => _ewma_Alpha_Throttle = value; }

		//Smoothing for Brake Resistance output. Lower = smoother. Must be greater than 0
		public float EWMA_ALPHA_BRAKE { get => _ewma_Alpha_Brake; set => _ewma_Alpha_Brake = value; }

		//Smoothing for Brake Resistance output. Lower = smoother. Must be greater than 0
		public float EWMA_ALPHA_BRAKE_FREQ { get => _ewma_Alpha_Brake_Freq; set => _ewma_Alpha_Brake_Freq = value; }

		//Smoothing for Throttle Resistance output. Lower = smoother. Must be greater than 0
		public float EWMA_ALPHA_THROTTLE_FREQ { get => _ewma_Alpha_Throttle_Freq; set => _ewma_Alpha_Throttle_Freq = value; }

		//How to scale Forward acceleration in determining throttle stiffness.
		public float FORWARD_ACCEL_MOD { get => _forward_Accel_Mod; set => _forward_Accel_Mod = value; }

		//The maximum acceleration frequency in Hz (avoid over 40). COrrelates to better grip
		public int MAX_ACCEL_GRIPLOSS_VIBRATION { get => _max_Accel_Griploss_Vibration; set => _max_Accel_Griploss_Vibration = value; }

		//The Minimum acceleration frequency in Hz (avoid over 40). Helps avoid clicking in controller
		public int MIN_ACCEL_GRIPLOSS_VIBRATION { get => _min_Accel_Griploss_Vibration; set => _min_Accel_Griploss_Vibration = value; }

		//On a scale of 1-200 with 1 being most stiff
		public int MIN_ACCEL_GRIPLOSS_STIFFNESS { get => _min_Accel_Griploss_Stiffness; set => _min_Accel_Griploss_Stiffness = value; }

		//On a scale of 1-200 with 1 being most stiff
		public int MAX_ACCEL_GRIPLOSS_STIFFNESS { get => _max_Accel_Griploss_Stiffness; set => _max_Accel_Griploss_Stiffness = value; }

		//On a scale of 1-200 with 1 being most stiff
		public int MIN_BRAKE_STIFFNESS { get => _min_Brake_Stiffness; set => _min_Brake_Stiffness = value; }

		//On a scale of 1-200 with 1 being most stiff
		public int MAX_BRAKE_STIFFNESS { get => _max_Brake_Stiffness; set => _max_Brake_Stiffness = value; }

		//The position (0-255) at which the brake should feel engaged with low grip surfaces
		public int BRAKE_VIBRATION_START { get => _brake_Vibration_Start; set => _brake_Vibration_Start = value; }

		//The depression of the brake lever at which the program should switch to vibration mode rather than smooth resistance. This helps to avoid clicking as vibration mode clicks when no force is applied. 
		public int BRAKE_VIBRATION__MODE_START { get => _brake_Vibration_Mode_Start; set => _brake_Vibration_Mode_Start = value; }

		//The depression of the throttle lever at which the program should switch to vibration mode rather than smooth resistance. This helps to avoid clicking as vibration mode clicks when no force is applied. 
		public int THROTTLE_VIBRATION_MODE_START { get => _throttle_Vibration_Mode_Start; set => _throttle_Vibration_Mode_Start = value; }

		//The Maximum resistance on the throttle (0-7)
		public int MAX_THROTTLE_RESISTANCE { get => _max_Throttle_Resistance; set => _max_Throttle_Resistance = value; }

		//The Maximum resistance on the Brake (0-7)
		public int MAX_BRAKE_RESISTANCE { get => _max_Brake_Resistance; set => _max_Brake_Resistance = value; }

		//The Minimum resistance on the throttle (0-7)
		public int MIN_THROTTLE_RESISTANCE { get => _min_Throttle_Resistance; set => _min_Throttle_Resistance = value; }

		//The Minimum resistance on the Brake (0-7)
		public int MIN_BRAKE_RESISTANCE { get => _min_Brake_Resistance; set => _min_Brake_Resistance = value; }

		//The upper end acceleration when calculating the throttle resistance. Any acceleration above this will be counted as this value when determining the throttle resistance.
		public int ACCELERATION_LIMIT { get => _acceleration_Limit; set => _acceleration_Limit = value; }

		// The percentage of the current RPM when we are in the "redline" of the engine
		public float RPM_REDLINE_RATIO { get => _rpm_Redline_Ratio; set => _rpm_Redline_Ratio = value; }

		//Should we disable the check for running applications?
		public bool DISABLE_APP_CHECK { get => _disable_App_Check; set => _disable_App_Check = value; }

		//Port for DSX Port Listener
		public int DSX_PORT { get => _dsx_PORT; set => _dsx_PORT = value; }

		//Port for Forza UDP server
		public int FORZA_PORT { get => _forza_PORT; set => _forza_PORT = value; }

		// The percentage of the trigger effects. 1 = 100%, 0.5 = 50%, 0 = 0% (off)
		public float LEFT_TRIGGER_EFFECT_INTENSITY { get => _left_Trigger_Eeffect_Intensity; set => _left_Trigger_Eeffect_Intensity = value; }

		// The percentage of the trigger effects. 1 = 100%, 0.5 = 50%, 0 = 0% (off)
		public float RIGHT_TRIGGER_EFFECT_INTENSITY { get => _right_Trigger_Eeffect_Intensity; set => _right_Trigger_Eeffect_Intensity = value; }

		public uint Verbose { get => _verbose; set => _verbose = value; }
	}
}
